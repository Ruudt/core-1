#!/usr/bin/env php
<?php

/**
 * Isotope eCommerce for Contao Open Source CMS
 *
 * Copyright (C) 2009-2014 terminal42 gmbh & Isotope eCommerce Workgroup
 *
 * @package    Isotope
 * @link       http://isotopeecommerce.org
 * @license    http://opensource.org/licenses/lgpl-3.0.html
 */


/**
 * Define the TL_ROOT constant
 */
define('TL_ROOT', dirname(__DIR__));


/**
 * Prepare the language files for Transifex.
 *
 * @package   Core
 * @author    Leo Feyer <https://github.com/leofeyer>
 * @copyright Leo Feyer 2011-2012
 */
class Transifex
{

    /**
     * Dispatch the request
     */
    public function run()
    {
        global $argv;

        if (!isset($argv[1]) || !in_array($argv[1], get_class_methods($this)))
        {
            $this->help();
        }
        else
        {
            $this->$argv[1]();
        }
    }


    /**
     * Show the help text
     */
    protected function help()
    {
        echo "\n";
        echo "  \033[1;33mPrepare the Contao language files for Transifex\033[0m\n";
        echo "  Usage: .tx/transifex <command> [<branch>] [<languages>]\n";
        echo "\n";
        echo "  \033[1;33m<command>\033[0m\n";
        echo "  \033[0;36msetup\033[0m         Create the source translation files\n";
        echo "  \033[0;36mimport\033[0m        Convert the Transifex files into Contao files\n";
        echo "  \033[0;36mexport\033[0m        Convert the Contao files into Transifex files\n";
        echo "  \033[0;36mpush\033[0m          Export and push latest source files\n";
        echo "  \033[0;36mpull\033[0m          Pull and import all translations\n";
        echo "  \033[0;36msync\033[0m          Sync with transifex (push & pull)\n";
        echo "  \033[0;36mhelp\033[0m          Show this help text\n";
        echo "\n";
        echo "  \033[1;33m<branch>\033[0m can be \033[0;36mdevelop\033[0m or \033[0;36mmaster\033[0m\n";
        echo "  \033[1;33m<languages>\033[0m can be a comma-separated list of languages\n";
        echo "\n";
    }


    /**
     * Setup the .xlf and config files for the Transifex client
     *
     * @param boolean $quiet If true, do not output any status messages
     */
    protected function setup($quiet=false)
    {
        global $argv;
        static $done = false;

        if ($done) {
            return;
        }

        $done = true;

        if (!in_array($argv[2], array('develop', 'master')))
        {
            echo "\n";
            echo "  \033[1;31m<branch> must be develop or master\n";
            $this->help();
            exit;
        }

        // Make sure "source" directory exists
        if (!is_dir(TL_ROOT . '/.tx/source'))
        {
            mkdir(TL_ROOT . '/.tx/source');
        }

        // Purge the target folder
        $this->rrdir(TL_ROOT . '/.tx/source/en');
        mkdir(TL_ROOT . '/.tx/source/en');

        // Create the .tx/config file
        $fh = fopen(TL_ROOT . '/.tx/config', 'wb');
        fputs($fh, "[main]\nhost = https://www.transifex.com\ntype = XLIFF\n");

        // Scan the modules folder
        foreach ($this->scandir(TL_ROOT . '/system/modules') as $module)
        {
            if (!is_dir(TL_ROOT . '/system/modules/' . $module . '/languages/en'))
            {
                continue;
            }

            // Create the subdirectory
            if (!is_dir(TL_ROOT . '/.tx/source/en/' . $module))
            {
                mkdir(TL_ROOT . '/.tx/source/en/' . $module);
            }

            // Scan the language files
            foreach ($this->scandir(TL_ROOT . '/system/modules/' . $module . '/languages/en') as $file)
            {
                if (substr($file, -4) != '.php')
                {
                    continue;
                }

                // Reset the TL_LANG array before the include
                $GLOBALS['TL_LANG'] = array();
                include TL_ROOT . '/system/modules/' . $module . '/languages/en/' . $file;
                $file = basename($file, '.php');

                // Create the XML document
                $xml = new DOMDocument('1.0', 'UTF-8');
                $xml->formatOutput = true;

                $xliff = $xml->createElement('xliff');
                $xliff->setAttribute('version', '1.1');
                $xml->appendChild($xliff);

                $xfile = $xml->createElement('file');
                $xfile->setAttribute('datatype', 'php');
                $xfile->setAttribute('original', 'system/modules/' . $module . '/languages/en/' . $file . '.php');
                $xfile->setAttribute('source-language', 'en');
                $xliff->appendChild($xfile);

                $xbody = $xml->createElement('body');
                $xfile->appendChild($xbody);

                // Add the labels
                foreach ($GLOBALS['TL_LANG'] as $category=>$labels)
                {
                    foreach ($labels as $key=>$label)
                    {
                        if (is_array($label)) // headline and explanation
                        {
                            foreach ($label as $i=>$text)
                            {
                                if (is_array($text)) // multiple explanations
                                {
                                    foreach ($text as $j=>$subtext)
                                    {
                                        $trans = $xml->createElement('trans-unit');
                                        $trans->setAttribute('id', "$category.$key.$i.$j");
                                        $xbody->appendChild($trans);

                                        $source = $xml->createElement('source');
                                        $source->appendChild($xml->createTextNode($subtext));
                                        $trans->appendChild($source);
                                    }
                                }
                                else
                                {
                                    $trans = $xml->createElement('trans-unit');
                                    $trans->setAttribute('id', "$category.$key.$i");
                                    $xbody->appendChild($trans);

                                    $source = $xml->createElement('source');
                                    $source->appendChild($xml->createTextNode($text));
                                    $trans->appendChild($source);
                                }
                            }
                        }
                        else
                        {
                            $trans = $xml->createElement('trans-unit');
                            $trans->setAttribute('id', "$category.$key");
                            $xbody->appendChild($trans);

                            $source = $xml->createElement('source');
                            $source->appendChild($xml->createTextNode($label));
                            $trans->appendChild($source);
                        }
                    }
                }

                // Save the XML document
                $xml->save(TL_ROOT . '/.tx/source/en/' . $module . '/' . $file . '.xlf');

                // Confirm
                if (!$quiet)
                {
                    echo "  Created .tx/source/en/$module/$file.xlf\n";
                }

                // Add an entry to the .tx/config file
                fputs($fh, "\n[isotope.{$argv[2]}-$module-$file]");
                fputs($fh, "\nsource_file = .tx/source/en/$module/$file.xlf");
                fputs($fh, "\nsource_lang = en");
                fputs($fh, "\nfile_filter = .tx/source/<lang>/$module/$file.xlf\n");
            }
        }

        // Close the .tx/config file
        fclose($fh);
    }


    /**
     * Create the Contao language files from the Transifex .xlf files
     */
    protected function import()
    {
        $languages = $this->languages();

        if (empty($languages))
        {
            foreach ($this->scandir(TL_ROOT . '/.tx/source') as $language)
            {
                if ($language == 'en') {
                    continue;
                }

                $languages[] = $language;
            }
        }

        // Process the selected languages
        foreach (array_unique($languages) as $language)
        {
            if (!is_dir(TL_ROOT . '/.tx/source/' . $language)) {
                echo "  Source files for \"$language\" not found\n";
                continue;
            }

            foreach ($this->scandir(TL_ROOT . '/.tx/source/' . $language) as $module)
            {
                // Create the language folder
                if (!is_dir(TL_ROOT . '/system/modules/' . $module . '/languages/' . $language))
                {
                    mkdir(TL_ROOT . '/system/modules/' . $module . '/languages/' . $language);
                }

                foreach ($this->scandir(TL_ROOT . '/.tx/source/' . $language . '/' . $module) as $file)
                {
                    if (substr($file, -4) != '.xlf')
                    {
                        continue;
                    }

                    // Read the .xlf file
                    $xml = new DOMDocument();
                    $xml->preserveWhiteSpace = false;
                    $xml->load(TL_ROOT . '/.tx/source/' . $language . '/' . $module . '/' . $file);
                    $units = $xml->getElementsByTagName('trans-unit');
                    $file = basename($file, '.xlf');

                    // Create the .php file
                    $fh = fopen(TL_ROOT . '/system/modules/' . $module . '/languages/' . $language . '/' . $file . '.php', 'wb');

                    // Add a short header with links to transifex.com
                    fputs($fh, "<?php\n\n");
                    fputs($fh, "/**\n");
                    fputs($fh, " * Isotope eCommerce for Contao Open Source CMS\n");
                    fputs($fh, " * \n");
                    fputs($fh, " * Copyright (C) 2009-2014 terminal42 gmbh & Isotope eCommerce Workgroup\n");
                    fputs($fh, " * \n");
                    fputs($fh, " * Translations are managed using Transifex. To create a new translation\n");
                    fputs($fh, " * or to help to maintain an existing one, please register at transifex.com.\n");
                    fputs($fh, " * \n");
                    fputs($fh, " * @link http://help.transifex.com/intro/translating.html\n");
                    fputs($fh, " * @link https://www.transifex.com/projects/i/isotope/language/$language/\n");
                    fputs($fh, " * \n");
                    fputs($fh, " * @license http://www.gnu.org/licenses/lgpl-3.0.html\n");
                    fputs($fh, " */\n\n");

                    // Add the labels
                    foreach ($units as $unit)
                    {
                        $node = ($language == 'en') ? $unit->firstChild : $unit->firstChild->nextSibling;

                        if ($node === null)
                        {
                            continue;
                        }

                        $value = str_replace("\n", '\n', $node->nodeValue);

                        // Quote the value depending on whether there are line breaks
                        if (strpos($value, '\n') !== false)
                        {
                            $value = '"' . str_replace('"', '\\"', $value) . '"';
                        }
                        else
                        {
                            $value = "'" . str_replace("'", "\\'", $value) . "'";
                        }

                        // Some closing </em> tags oddly have an extra space in
                        if (strpos($value, '</ em>') !== false)
                        {
                            $value = str_replace('</ em>', '</em>', $value);
                        }

                        $chunks = explode('.', $unit->getAttribute('id'));

                        switch (count($chunks))
                        {
                            case 2:
                                fputs($fh, "\$GLOBALS['TL_LANG']['" . $chunks[0] . "'][" . $this->quote($chunks[1]) . "] = $value;\n");
                                break;

                            case 3:
                                fputs($fh, "\$GLOBALS['TL_LANG']['" . $chunks[0] . "'][" . $this->quote($chunks[1]) . "][" . $this->quote($chunks[2]) . "] = $value;\n");
                                break;

                            case 4:
                                fputs($fh, "\$GLOBALS['TL_LANG']['" . $chunks[0] . "'][" . $this->quote($chunks[1]) . "][" . $this->quote($chunks[2]) . "][" . $this->quote($chunks[3]) . "] = $value;\n");
                                break;

                            default:
                                throw new OutOfBoundsException('Can\'t handle more than 4 keys!');
                        }
                    }

                    // Close the file
                    fclose($fh);
                    echo "  Created system/modules/$module/languages/$language/$file.php\n";
                }
            }
        }
    }


    /**
     * Export and push an existing translation
     */
    protected function export()
    {
        $languages = $this->languages();

        // Determine which languages to export
        if (empty($languages))
        {
            foreach ($this->scandir(TL_ROOT . '/system/modules') as $module)
            {
                if (!is_dir(TL_ROOT . '/system/modules/' . $module . '/languages'))
                {
                    continue;
                }

                foreach ($this->scandir(TL_ROOT . '/system/modules/' . $module . '/languages') as $language)
                {
                    if ($language == 'en') {
                        continue;
                    }

                    $languages[] = $language;
                }
            }
        }

        $this->setup(true);

        foreach (array_unique($languages) as $language)
        {
            // Purge the target folder
            $this->rrdir(TL_ROOT . '/.tx/source/' . $language);
            mkdir(TL_ROOT . '/.tx/source/' . $language);

            // Scan the modules folder
            foreach ($this->scandir(TL_ROOT . '/system/modules') as $module)
            {
                // Skip if the source language does not exist
                if (!is_dir(TL_ROOT . '/system/modules/' . $module . '/languages/en'))
                {
                    continue;
                }

                // Create the subdirectory
                if (!is_dir(TL_ROOT . '/.tx/source/' . $language . '/' . $module))
                {
                    mkdir(TL_ROOT . '/.tx/source/' . $language . '/' . $module);
                }

                // Scan the source language files
                foreach ($this->scandir(TL_ROOT . '/system/modules/' . $module . '/languages/en') as $file)
                {
                    if (substr($file, -4) != '.php')
                    {
                        continue;
                    }

                    // The file has not been translated yet
                    if (!file_exists(TL_ROOT . '/system/modules/' . $module . '/languages/' . $language . '/' . $file))
                    {
                        continue;
                    }

                    $file = basename($file, '.php');

                    // Read the source file
                    $english = new DOMDocument();
                    $english->preserveWhiteSpace = false;
                    $english->load(TL_ROOT . '/.tx/source/en/' . $module . '/' . $file . '.xlf');

                    // Prepare for XPath
                    $xpath = new DOMXPath($english);

                    // Create the XML document
                    $xml = new DOMDocument('1.0', 'UTF-8');
                    $xml->formatOutput = true;

                    $xliff = $xml->createElement('xliff');
                    $xliff->setAttribute('version', '1.1');
                    $xml->appendChild($xliff);

                    $xfile = $xml->createElement('file');
                    $xfile->setAttribute('datatype', 'php');
                    $xfile->setAttribute('original', 'system/modules/' . $module . '/languages/en/' . $file . '.php');
                    $xfile->setAttribute('source-language', 'en');
                    $xliff->appendChild($xfile);

                    $xbody = $xml->createElement('body');
                    $xfile->appendChild($xbody);

                    // Reset the TL_LANG array before the include
                    $GLOBALS['TL_LANG'] = array();
                    include TL_ROOT . '/system/modules/' . $module . '/languages/' . $language . '/' . $file . '.php';

                    // Add the labels
                    foreach ($GLOBALS['TL_LANG'] as $category=>$labels)
                    {
                        foreach ($labels as $key=>$label)
                        {
                            if (is_array($label)) // headline and explanation
                            {
                                foreach ($label as $i=>$text)
                                {
                                    if (is_array($text)) // multiple explanations
                                    {
                                        foreach ($text as $j=>$subtext)
                                        {
                                            $id = "$category.$key.$i.$j";

                                            // Check whether the string exists in the source translation
                                            if (($original = $xpath->query("//*[@id='$id']")->item(0)) !== null)
                                            {
                                                $trans = $xml->createElement('trans-unit');
                                                $trans->setAttribute('id', $id);
                                                $xbody->appendChild($trans);

                                                $source = $xml->createElement('source');
                                                $source->appendChild($xml->createTextNode($original->nodeValue));
                                                $trans->appendChild($source);

                                                $target = $xml->createElement('target');
                                                $target->appendChild($xml->createTextNode($subtext));
                                                $trans->appendChild($target);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        $id = "$category.$key.$i";

                                        // Check whether the string exists in the source translation
                                        if (($original = $xpath->query("//*[@id='$id']")->item(0)) !== null)
                                        {
                                            $trans = $xml->createElement('trans-unit');
                                            $trans->setAttribute('id', $id);
                                            $xbody->appendChild($trans);

                                            $source = $xml->createElement('source');
                                            $source->appendChild($xml->createTextNode($original->nodeValue));
                                            $trans->appendChild($source);

                                            $target = $xml->createElement('target');
                                            $target->appendChild($xml->createTextNode($text));
                                            $trans->appendChild($target);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                $id = "$category.$key";

                                // Check whether the string exists in the source translation
                                if (($original = $xpath->query("//*[@id='$id']")->item(0)) !== null)
                                {
                                    $trans = $xml->createElement('trans-unit');
                                    $trans->setAttribute('id', $id);
                                    $xbody->appendChild($trans);

                                    $source = $xml->createElement('source');
                                    $source->appendChild($xml->createTextNode($original->nodeValue));
                                    $trans->appendChild($source);

                                    $target = $xml->createElement('target');
                                    $target->appendChild($xml->createTextNode($label));
                                    $trans->appendChild($target);
                                }
                            }
                        }
                    }

                    // Save the XML document
                    $xml->save(TL_ROOT . '/.tx/source/' . $language . '/' . $module . '/' . $file . '.xlf');
                    echo "  Created .tx/source/{$language}/$module/$file.xlf\n";
                }
            }
        }
    }

    /**
     * Push latest source files to Transifex
     */
    protected function push()
    {
        $this->setup(true);

        // Push source language to transifex.com
        passthru('tx push --skip --source --language=en');
    }

    /**
     * Pull and import translations
     */
    protected function pull()
    {
        $this->rrdir(TL_ROOT . '/.tx/source');
        $this->setup(true);

        // Pull translations from transifex.com
        $languages = $this->languages();
        if (empty($languages)) {
            passthru('tx pull --skip --all');
        } else {
            passthru('tx pull --skip --language=' . implode(',', $languages));
        }

        $this->import();
    }

    /**
     * Sync with transifex (push & pull)
     */
    protected function sync()
    {
        $this->push();
        $this->pull();
    }

    /**
     * Get languages from console parameters
     * @return  array
     */
    protected function languages()
    {
        global $argv;
        $languages = array();

        // Determine which languages to export
        if (isset($argv[3]) || (isset($argv[2]) && !in_array($argv[2], array('develop', 'master'))))
        {
            $languages = explode(',', ($argv[3] ?: $argv[2]));
        }

        return $languages;
    }


    /**
     * Return the contents of a directory without "." and ".."
     *
     * @param string $dir The directory path
     *
     * @return array The directory content
     */
    protected function scandir($dir)
    {
        $return = array();

        foreach (scandir($dir) as $file)
        {
            if ($file != '.' && $file != '..' && $file != '.DS_Store')
            {
                $return[] = $file;
            }
        }

        return $return;
    }


    /**
     * Quote a key if it is not numeric
     *
     * @param string $key The string representation of the key
     *
     * @return mixed The quoted string or numeric integer
     */
    protected function quote($key)
    {
        if ($key === '0')
        {
            return 0;
        }
        elseif (is_numeric($key))
        {
            return intval($key);
        }
        else
        {
            return "'$key'";
        }
    }


    /**
     * Recursively remove a directory
     *
     * @param string $dir The directory path
     */
    protected function rrdir($dir)
    {
        if (!is_dir($dir))
        {
            return;
        }

        foreach ($this->scandir($dir) as $file)
        {
            if (is_dir("$dir/$file"))
            {
                $this->rrdir("$dir/$file");
            }
            else
            {
                unlink("$dir/$file");
            }
        }

        rmdir($dir);
    }
}

$objTransifex = new Transifex();
$objTransifex->run();
